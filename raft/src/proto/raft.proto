syntax = "proto3";

package raftpb;

// Example RequestVote RPC arguments structure.
//message RequestVoteArgs {
//    // Your data here (2_A, 2B).
//    uint64 term = 1;
//    uint64 candidate_id = 2;
//    uint64 last_log_index = 3;
//    uint64 last_log_term = 4;
//}

// Example RequestVote RPC reply structure.
//message RequestVoteReply {
//    // Your data here (2_A).
//    uint64 term = 1;
//    uint64 id = 2;
//    bool vote_granted = 3;
//}

message Entry {
    uint64 term = 1;
    uint64 index = 2;
    bytes data = 3;
}

message Snapshot {
  uint64 term = 1;
  uint64 vote = 2;
  repeated Entry log = 3;
}

enum MessageType {
    MsgAppend = 0;
    MsgAppendResponse = 1;
    MsgRequestVote = 2;
    MsgRequestVoteResponse = 3;
    MsgHeartbeat = 4;
    MsgHeartbeatResponse = 5;
  MsgRequestPreVote = 6;
  MsgRequestPreVoteResponse = 7;
}

message Message {
    MessageType msg_type = 1;
    uint64 from = 2;
    uint64 to = 3;
    uint64 term = 4;
    uint64 log_index = 5;
    uint64 log_term = 6;
    repeated Entry entries = 7;
    uint64 commit = 8;
    bool accept = 9;
}

message AppendEntries {
    uint64 term = 1;
    uint64 leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated Entry entries = 5;
    //uint64 leader_commit = 6;
}

message AppendEntriesReply {
    uint64 term = 1;
    uint64 id = 2;
    bool success = 3;
}